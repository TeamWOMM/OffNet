services:
  backend:
    build: ./backend
    restart: always
    networks:
      - app-network
    volumes:
      - ./backend:/app  # Sync local backend code with the container
      - /app/node_modules  # Prevents overwriting node_modules
      - backend_data:/app/data  # Persistent storage for requests.json & scrapes.json
    environment:
      - NODE_ENV=development
      - OLLAMA_API=https://ollama:11434  # Connect backend to Ollama via HTTPS
      - WS_ORIGIN=http://frontend:4000  # Allow WebSocket connections from frontend
    command: npm run dev
    ports:
      - "5000:5000"  # Expose WebSocket server
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/api" ]
      interval: 10s
      retries: 5
      start_period: 10s

  frontend:
    build: ./frontend
    restart: always
    ports:
      - "4000:4000"
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_WS_URL=ws://backend:5000  # Use backend WebSocket
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  ollama:
    image: ollama/ollama
    restart: always
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama  # Persist Ollama models
    networks:
      - app-network
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |
        ollama list | grep -q 'deepseek-r1:8b' || ollama pull deepseek-r1:8b
        ollama serve
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:11434" ]
      interval: 10s
      retries: 5
      start_period: 10s

networks:
  app-network:
    driver: bridge

volumes:
  ollama_data:  # Persistent volume for Ollama models
  backend_data:  # Persistent volume for requests.json & scrapes.json
